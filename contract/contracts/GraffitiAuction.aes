@compiler >= 6

include "List.aes"
include "Pair.aes"

// the contract allows for definition of unlimited separate auctions, meant to be in one pysical location, i.e. one event
// each bids includes reference to ipfs files, for this usecase svg files
// bids that are paying lower than the sufficient amount are refunded, once higher bids get included
contract GraffitiAuction =

  type is_admin = map(address, bool)

  type auction_slots_map = map(int, auction_slot)

  record state =
    { is_admin : is_admin
    , auction_metadata : auction_metadata
    , latest_auction_slot_id : int
    , latest_bid_seq_id : int
    , auction_slots : auction_slots_map }

  // metadata of the physical auction environment in our usecase for paintings on a physical wall
  record auction_metadata =
    { geolocation : string
    , canvas_width : int
    , canvas_height : int }

  record auction_slot =
    { id : int  // sequencial id for each slot, starting from 1
    , time_capacity : int // time is the unit to be bid off, this defined the availability for this slot
    , minimum_time_per_bid : int // minimum time that has to be bid for
    , maximum_time_per_bid : int // maximum time that has to be bid for
    , successful_bids : list(bid) // all bids that are still considered successfull, can change until end_block_height is reached
    , failed_bids : list(bid) // all bids that are considered failed, were overbid
    , start_block_height : int // start block height from which bids can be placed in this block
    , end_block_height : int } // end block height after which bids can no longer be placed in this block

  record bid =
    { seq_id : int // sequencial id for each slot, starting from 1
    , user : address // user address placing the bid
    , amount : int // total amount that is payed for this bid
    , time : int // time that is bid for (unit to be bid off)
    , amount_per_time : int // amount that is payed per time
    , data : artwork_data } // reference to metadata that is included in the bid

  record artwork_data =
    { artwork_reference : string
    , coordinates : coordinates }

  record coordinates =
    { x : int
    , y : int }

  entrypoint init(geolocation' : string,
                  canvas_width' : int,
                  canvas_height' : int) : state =
    let auction_metadata' = { geolocation = geolocation',
                              canvas_width = canvas_width',
                              canvas_height = canvas_height' }
    { is_admin = {[Call.caller] = true},
      auction_metadata = auction_metadata',
      latest_auction_slot_id = 0,
      latest_bid_seq_id = 0,
      auction_slots = {} }

  entrypoint get_auction_metadata() : auction_metadata =
    state.auction_metadata

  stateful entrypoint add_auction_slot(time_capacity' : int,
                                       start_block_height' : int,
                                       end_block_height' : int,
                                       minimum_time_per_bid' : int,
                                       maximum_time_per_bid' : int) : int =
    require(is_admin(Call.caller), "add_auction_slot caller has to be admin")
    require(in_future(start_block_height'), "add_auction_slot start_block_height' has to be in future")
    require(in_future(end_block_height'), "add_auction_slot end_block_height' has to be in future")
    require(start_block_height' < end_block_height', "add_auction_slot start_block_height' has to be earlier than end_block_height'")
    require(time_capacity' > 0, "add_auction_slot time_capacity' has to be greater than 0")
    require(minimum_time_per_bid' > 0, "add_auction_slot minimum_time_per_bid' has to be greater than 0")
    require(maximum_time_per_bid' > 0, "add_auction_slot maximum_time_per_bid' has to be greater than 0")

    let next_auction_slot_id = state.latest_auction_slot_id + 1

    let new_auction_slot = { id = next_auction_slot_id,
                             time_capacity = time_capacity',
                             minimum_time_per_bid = minimum_time_per_bid',
                             maximum_time_per_bid = maximum_time_per_bid',
                             successful_bids = [],
                             failed_bids = [],
                             start_block_height = start_block_height',
                             end_block_height = end_block_height' }

    put(state{ latest_auction_slot_id = next_auction_slot_id, auction_slots[next_auction_slot_id] = new_auction_slot })
    next_auction_slot_id

  entrypoint all_auction_slots() : list(auction_slot) =
    let auction_slot_list = Map.to_list(state.auction_slots)
    List.map(Pair.snd, auction_slot_list)

  entrypoint get_auction_slot(id : int) : auction_slot =
    switch(Map.lookup(id, state.auction_slots))
      Some(auction_slot) => auction_slot
      None => abort("auction_slot does not exist")

  // trying to place a bid
  // multiple validity checks are done on the auction slot data and bid itself
  // failing bids still lead to a successfull execution and will be persisted in state
  payable stateful entrypoint place_bid(auction_slot_id : int,
                                time' : int,
                                artwork_reference' : string,
                                x' : int,
                                y' : int) : auction_slot =
    require(Call.value > 0, "place_bid call value has to be greater than 0")
    let auction_slot = get_auction_slot(auction_slot_id)
    require(auction_slot.time_capacity >= time', "place_bid time_capacity of auction_slot has to be greater or equals time bid for")
    require(auction_slot.start_block_height =< Chain.block_height, "place_bid auction_slot is not yet opened at height")
    require(auction_slot.end_block_height > Chain.block_height, "place_bid auction_slot is already closed at height")
    require(auction_slot.minimum_time_per_bid =< time', "place_bid time has to be greater or equals auction_slot minimum_time_per_bid")
    require(auction_slot.maximum_time_per_bid >= time', "place_bid time has to be smaller or equals auction_slot maximum_time_per_bid")
    require(x' >= 0, "x has to be greater or equals 0")
    require(y' >= 0, "y has to be greater or equals 0")
    require(state.auction_metadata.canvas_width >= x', "x has to be smaller canvas width")
    require(state.auction_metadata.canvas_height >= y', "y has to be smaller canvas height")

    let next_seq_id = state.latest_bid_seq_id + 1
    let coordinates' = { x = x', y = y' }
    let artwork_data' = { artwork_reference = artwork_reference', coordinates = coordinates' }
    let bid = { seq_id = next_seq_id,
                user = Call.caller,
                amount = Call.value,
                time = time',
                amount_per_time = Call.value / time',
                data = artwork_data' }

    // depends on sorted insertion as bids are split lateron only by time available, ignoring amount per time
    let bids_to_reprocess = List.insert_by(bid_amount_comperator, bid, auction_slot.successful_bids)

    // only reprocesses previously successful bids plus the new one, returned bids are old successful, excluding old failed
    let split_successful_bids_tuple = process_bids(auction_slot.time_capacity, bids_to_reprocess)

    // old failed bids have to be appended to newly failed bids from reprocessing, successful includes all old ones
    let updated_auction_slot = update_auction_slot_with_bids(auction_slot, split_successful_bids_tuple)

    // update auction_slot in state
    let updated_auction_slots = state.auction_slots{[auction_slot_id] = updated_auction_slot}
    put(state{ auction_slots = updated_auction_slots, latest_bid_seq_id = next_seq_id })

    // refund bids that were newly identified as to low
    refund_new_to_low_bids(split_successful_bids_tuple)
    updated_auction_slot


  stateful entrypoint admin_withdraw_to_address(to_address : address) : int =
    admin_withdraw(to_address)

  stateful entrypoint admin_withdraw_to_admin() : int =
    admin_withdraw(Call.caller)


  // internal functions //

  // processes bids for if they are still considered successful
  function process_bids(time_capacity : int, bids_to_reprocess : list(bid)) : (list(bid) * list(bid)) =
    let filter_by_capacity = (bid : bid, acc_bids) =>
     switch(acc_bids)
       (sufficient, to_low) =>
         let sufficient_time_sum = List.sum(List.map((x) => x.time, sufficient))
         if(time_capacity >= sufficient_time_sum + bid.time)
           (bid :: sufficient, to_low)
         else
           (sufficient, bid :: to_low)
    List.foldr(filter_by_capacity, ([], []), bids_to_reprocess)

  // updates and auction slot with the bids that are updated successful or newly to low
  function update_auction_slot_with_bids(auction_slot : auction_slot, bids_tuple : (list(bid) * list(bid))) : auction_slot =
    switch(bids_tuple)
      (all_successful_bids, new_failed_bids) =>
        let appended_failed_bids = new_failed_bids ++ auction_slot.failed_bids
        auction_slot{ successful_bids = all_successful_bids, failed_bids = appended_failed_bids }

  // refunds all bids that are newly added to the to low paying list after processing bids
  stateful function refund_new_to_low_bids(bids_tuple : (list(bid) * list(bid))) =
    switch(bids_tuple)
      (_, new_failed_bids) =>
        let refund_function = (bid : bid) => Chain.spend(bid.user, bid.amount)
        List.map(refund_function, new_failed_bids)

  // comperator for bidding amount per time
  function bid_amount_comperator(a : bid, b : bid) : bool =
    a.amount_per_time < b.amount_per_time

  function in_future(height : int) : bool =
    height > Chain.block_height

  function is_admin(address : address) : bool =
    Map.lookup_default(address, state.is_admin, false)

  // doesn't allow withdraw of amount in active slots
  stateful function admin_withdraw(to_address : address) : int =
    require(is_admin(Call.caller), "admin_withdraw caller has to be admin")
    let slots_ending_in_futue = List.filter((slot) => in_future(slot.end_block_height), all_auction_slots())
    let bids_in_future_ending_slots = List.foldr((slot, acc_bids) => acc_bids ++ slot.successful_bids, [], slots_ending_in_futue)
    let amount_in_future_ending_slots = List.sum(List.map((bid) => bid.amount, bids_in_future_ending_slots))
    let balance_to_withdraw = Contract.balance - amount_in_future_ending_slots

    Chain.spend(to_address, balance_to_withdraw)
    balance_to_withdraw
